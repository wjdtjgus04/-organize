1. 자바빈즈 (JavaBeans):
java

// JavaBean 클래스 예시
public class UserBean {
    private String username;
    private int age;

    // 기본 생성자
    public UserBean() {}

    // 초기화를 위한 생성자
    public UserBean(String username, int age) {
        this.username = username;
        this.age = age;
    }

    // 속성에 대한 getter 및 setter 메서드
    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    // toString 메서드
    @Override
    public String toString() {
        return "UserBean{" +
                "username='" + username + '\'' +
                ", age=" + age +
                '}';
    }
}
2. 표현언어 (Expression Language, EL) 및 JSP:
jsp

<%@ page import="example.UserBean" %>
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<html>
<head>
    <title>JSP 및 EL 예시</title>
</head>
<body>
    <jsp:useBean id="user" class="example.UserBean" />

    <%-- 속성 설정 --%>
    <jsp:setProperty name="user" property="username" value="John Doe" />
    <jsp:setProperty name="user" property="age" value="25" />

    <%-- EL을 사용하여 속성에 접근 --%>
    <p>이름: ${user.username}</p>
    <p>나이: ${user.age}</p>

    <%-- JSP 내에서 Java 코드로 객체 생성하여 초기화 --%>
    <%
        UserBean anotherUser = new UserBean("Alice", 30);
    %>

    <p>다른 사용자 이름: ${anotherUser.username}</p>
    <p>다른 사용자 나이: ${anotherUser.age}</p>
</body>
</html>

3. JDBC (Java Database Connectivity)와 JSP:
jsp

<%@ page import="java.sql.*" %>
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<html>
<head>
    <title>JDBC 및 JSP 예시</title>
</head>
<body>
    <%
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        try {
            // 드라이버 로드
            Class.forName("com.mysql.cj.jdbc.Driver");

            // 커넥션 생성
            String url = "jdbc:mysql://localhost:3306/example";
            String username = "yourUsername";
            String password = "yourPassword";
            connection = DriverManager.getConnection(url, username, password);

            // SQL 쿼리 실행
            String sql = "SELECT * FROM users WHERE age > ?";
            preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setInt(1, 20);
            resultSet = preparedStatement.executeQuery();

            // 결과 출력
            while (resultSet.next()) {
                out.println("<p>이름: " + resultSet.getString("username") + "</p>");
                out.println("<p>나이: " + resultSet.getInt("age") + "</p>");
            }

        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        } finally {
            // 리소스 정리
            try {
                if (resultSet != null) resultSet.close();
                if (preparedStatement != null) preparedStatement.close();
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    %>
</body>
</html>

-----------------------------------------------------------


변수 및 자료형:

변수 할당: 변수는 값을 저장하는데 사용되며, 자료형은 자료의 종류를 나타냅니다.
python
Copy code
x = 10        # 정수형 변수
y = 'Hello'   # 문자열 변수
z = [1, 2, 3]  # 리스트 (여러 값을 담을 수 있는 배열)
조건문:

if, elif, else: 조건문을 사용하여 특정 조건에 따라 코드 블록을 실행합니다.
python
Copy code
if x > 0:
    print('양수')
elif x == 0:
    print('0')
else:
    print('음수')
반복문:

for 문: 리스트나 범위를 순회하며 반복 작업을 수행합니다.
while 문: 특정 조건이 만족하는 동안 코드를 반복 실행합니다.
python
Copy code
for item in z:
    print(item)

while x > 0:
    print(x)
    x -= 1
함수:

함수 정의 및 호출: 함수는 코드를 논리적 단위로 나누고 재사용 가능하게 만듭니다.
python
Copy code
def add(a, b):
    return a + b

result = add(3, 5)
클래스:

객체 지향 프로그래밍: 클래스는 관련 데이터와 함수를 묶어 객체를 생성하는데 사용됩니다.
python
Copy code
class MyClass:
    def __init__(self, value):
        self.value = value
    
    def display(self):
        print(self.value)

obj = MyClass(42)
obj.display()
데이터 처리 및 시각화 라이브러리:
NumPy (수치 계산):

다차원 배열: 수학 및 통계 연산을 위한 배열과 함수를 제공합니다.
python
Copy code
import numpy as np

arr = np.array([1, 2, 3])
Pandas (데이터 프레임):

테이블 형태의 데이터 구조: 엑셀과 유사한 데이터프레임을 제공하여 데이터를 쉽게 조작할 수 있습니다.
python
Copy code
import pandas as pd

data = {'Name': ['Alice', 'Bob', 'Charlie'],
        'Age': [25, 30, 35]}

df = pd.DataFrame(data)
Matplotlib (그래프 시각화):

2D 그래픽 라이브러리: 선 그래프, 히스토그램, 산점도 등을 생성하여 데이터를 시각적으로 표현할 수 있습니다.
python
Copy code
import matplotlib.pyplot as plt

x_values = np.arange(0, 10, 0.1)
y_values = np.sin(x_values)

plt.plot(x_values, y_values)
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Sine Wave')
plt.show()

-------------------------------------------------------------------------------------------

1. 도서 클래스 (Book Class):
java

public class Book {
    private String title;
    private String author;
    private int pageCount;

    
    public Book(String title, String author, int pageCount) {
        this.title = title;
        this.author = author;
        this.pageCount = pageCount;
    }

   
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public int getPageCount() {
        return pageCount;
    }

    public void setPageCount(int pageCount) {
        this.pageCount = pageCount;
    }

    public void displayInfo() {
        System.out.println("Title: " + title);
        System.out.println("Author: " + author);
        System.out.println("Page Count: " + pageCount);
    }
}

---------------------------------------------------------------------

2. 학생 클래스 (Student Class):
java

public class Student {
    private String name;
    private int age;
    private String studentId;

    
    public Student(String name, int age, String studentId) {
        this.name = name;
        this.age = age;
        this.studentId = studentId;
    }

   
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getStudentId() {
        return studentId;
    }

    public void setStudentId(String studentId) {
        this.studentId = studentId;
    }

    
    public void displayInfo() {
        System.out.println("Name: " + name);
        System.out.println("Age: " + age);
        System.out.println("Student ID: " + studentId);
    }
}

--------------------------------------------------------------------------------------

public class Rectangle {
    private double length;
    private double width;


    public Rectangle(double length, double width) {
        this.length = length;
        this.width = width;
    }

  
    public double getLength() {
        return length;
    }

    public void setLength(double length) {
        this.length = length;
    }

    public double getWidth() {
        return width;
    }

    public void setWidth(double width) {
        this.width = width;
    }


    public double calculateArea() {
        return length * width;
    }
}

-------------------------------------------------------------------------
public class BankAccount {
    private String accountNumber;
    private String accountHolder;
    private double balance;

    
    public BankAccount(String accountNumber, String accountHolder, double balance) {
        this.accountNumber = accountNumber;
        this.accountHolder = accountHolder;
        this.balance = balance;
    }

    
    public String getAccountNumber() {
        return accountNumber;
    }

    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }

    public String getAccountHolder() {
        return accountHolder;
    }

    public void setAccountHolder(String accountHolder) {
        this.accountHolder = accountHolder;
    }

    public double getBalance() {
        return balance;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }

   
    public void deposit(double amount) {
        balance += amount;
    }

   
    public void withdraw(double amount) {
        if (balance >= amount) {
            balance -= amount;
        } else {
            System.out.println("잔액이 부족합니다.");
        }
    }

   
    public void checkBalance() {
        System.out.println("계좌번호: " + accountNumber);
        System.out.println("예금주: " + accountHolder);
        System.out.println("잔액: " + balance);
    }
}

----------------------------------------------------------------------------------------------------
class Animal {
    void eat() {
        System.out.println("Animal is eating");
    }
}

class Dog extends Animal {
    void bark() {
        System.out.println("Dog is barking");
    }

    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.eat();
        dog.bark();
    }
}
---------------------------------------------------------------------------------

class Vehicle {
    void start() {
        System.out.println("Vehicle is starting");
    }
}


class Car extends Vehicle {
    void drive() {
        System.out.println("Car is driving");
    }

    public static void main(String[] args) {
        Car car = new Car();
        car.start();
        car.drive();
    }
}

-------------------------------------------------------------------------

class Person {
    void eat() {
        System.out.println("Person is eating");
    }
}

class Student extends Person {
    void study() {
        System.out.println("Student is studying");
    }

    public static void main(String[] args) {
        Student student = new Student();
        student.eat();
        student.study();
    }
}
---------------------------------------------------------------------------

class Shape {
    void draw() {
        System.out.println("Drawing a shape");
    }
}

class Circle extends Shape {
    void calculateArea() {
        System.out.println("Calculating the area of a circle");
        // 여기에 원의 넓이 계산 로직을 추가하세요.
    }

    public static void main(String[] args) {
        Circle circle = new Circle();
        circle.draw();
        circle.calculateArea();
    }
}

------------------------------------------------------------------------------------

class Employee {
    void work() {
        System.out.println("Employee is working");
    }
}


class Manager extends Employee {
    void manage() {
        System.out.println("Manager is managing");
    }

    public static void main(String[] args) {
        Manager manager = new Manager();
        manager.work();
        manager.manage();
    }
}

------------------------------------------------------------------------------------------------------

class Bird {
    void fly() {
        System.out.println("Bird is flying");
    }
}

// 여기에 Penguin 클래스를 작성하세요.

class Penguin extends Bird {
    void swim() {
        System.out.println("Penguin is swimming");
    }

    public static void main(String[] args) {
        Penguin penguin = new Penguin();
        penguin.fly(); // 펭귄은 날지 못하므로 fly 메서드 호출은 의미 없음
        penguin.swim();
    }
}

===========================================================================================
class Animal {
    void eat() {
        System.out.println("Animal is eating");
    }
}

// 여기에 Dog 클래스를 작성하세요.
class Dog extends Animal {
    void bark() {
        System.out.println("Dog is barking");
    }

    @Override
    void eat() {
        super.eat(); // 부모 클래스의 eat 메서드 호출
        System.out.println("Dog is eating too");
    }

    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.eat();
        dog.bark();
    }
}
--------------------------------------------------------------------

class Vehicle {
    void start() {
        System.out.println("Vehicle is starting");
    }
}

// 여기에 Car 클래스를 작성하세요.

class Car extends Vehicle {
    void drive() {
        System.out.println("Car is driving");
    }

    @Override
    void start() {
        super.start(); // 부모 클래스의 start 메서드 호출
        System.out.println("Car is starting too");
    }

    public static void main(String[] args) {
        Car car = new Car();
        car.start();
        car.drive();
    }
    -----------------------------------------------------------------------------------------------
    class Animal {
    void makeSound() {
        System.out.println("Animal makes a sound");
    }
}
-----------------------------------------------------------------------------------------------------------

class Dog extends Animal {
    @Override
    void makeSound() {
        System.out.println("Dog barks");
    }

    public static void main(String[] args) {
        Dog myDog = new Dog();
        myDog.makeSound();  // Dog 클래스에서 오버라이딩한 메서드가 호출됨
    }
}
=================================================================================
class Shape {
    void draw() {
        System.out.println("Drawing a shape");
    }
}

class Circle extends Shape {
    @Override
    void draw() {
        System.out.println("Drawing a circle");
    }

    public static void main(String[] args) {
        Circle myCircle = new Circle();
        myCircle.draw();  // Circle 클래스에서 오버라이딩한 메서드가 호출됨
    }
}
--------------------------------------------------------------------------------------------------

class Shape {
    void draw() {
        System.out.println("Drawing a shape");
    }
}

class Circle extends Shape {
    @Override
    void draw() {
        System.out.println("Drawing a circle");
    }

    public static void main(String[] args) {
        Circle myCircle = new Circle();
        myCircle.draw();  // Circle 클래스에서 오버라이딩한 메서드가 호출됨
    }
}

----------------------------------------------------------------------------------

class Bird {
    void fly() {
        System.out.println("Bird is flying");
    }
}

class Penguin extends Bird {
    @Override
    void fly() {
        System.out.println("Penguin can't fly");
    }

    public static void main(String[] args) {
        Penguin myPenguin = new Penguin();
        myPenguin.fly();  // Penguin 클래스에서 오버라이딩한 메서드가 호출됨
    }
}


-----------------------------------------------------------------------

public class PublicExample {
    public void printMessage() {
        System.out.println("This is a public method");
    }

    public static void main(String[] args) {
        PublicExample example = new PublicExample();
        example.printMessage();
    }


}

-----------------------------------------------------------------

class PrivateExample {
    private int count;

    private void increment() {
        count++;
    }

    public static void main(String[] args) {
        PrivateExample example = new PrivateExample();
        // 아래 주석 해제 시 컴파일 오류 발생
        // example.increment();
    }
}

----------------------------------------------------------------------------

class Animal {
    protected void eat() {
        System.out.println("Animal is eating");
    }
}

class Dog extends Animal {
    void bark() {
        System.out.println("Dog is barking");
    }

    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.eat();  // 상속 받은 protected 메서드는 하위 클래스에서 접근 가능
        dog.bark();
    }
}
------------------------------------------------------------------------------

class StaticExample {
    static int count = 0;

    static void increment() {
        count++;
    }

    public static void main(String[] args) {
        StaticExample.increment();
        System.out.println("Count: " + StaticExample.count);
    }
}

---------------------------------------------------------------------

class FinalExample {
    final int value = 10;

    final void printValue() {
        System.out.println("Value: " + value);
    }

    public static void main(String[] args) {
        FinalExample example = new FinalExample();
        example.printValue();
        // 아래 주석 해제 시 컴파일 오류 발생
        // example.value = 20;
    }
}

----------------------------------------

class Animal {
    void makeSound() {
        System.out.println("Animal makes a sound");
    }
}

class Dog extends Animal {
    @Override
    void makeSound() {
        System.out.println("Dog barks");
    }
}

class Cat extends Animal {
    @Override
    void makeSound() {
        System.out.println("Cat meows");
    }
}

public class PolymorphicArrayExample {
    public static void main(String[] args) {
        Animal[] animals = new Animal[3];
        animals[0] = new Dog();
        animals[1] = new Cat();
        animals[2] = new Dog();

        for (Animal animal : animals) {
            animal.makeSound();  // 다형성: 배열 내에 각 객체의 실제 타입에 따라 다른 메서드 호출
        }
    }
}
--------------------------------------------------------------

class Animal {
    void eat() {
        System.out.println("Animal is eating");
    }
}

class Dog extends Animal {
    void bark() {
        System.out.println("Dog is barking");
    }
}

public class DowncastingExample {
    public static void main(String[] args) {
        Animal myDog = new Dog();  // 업캐스팅
        myDog.eat();               // Animal 클래스의 메서드 호출

        // 다운캐스팅
        if (myDog instanceof Dog) {
            Dog myRealDog = (Dog) myDog;  // 다운캐스팅
            myRealDog.bark();            // 다운캐스팅 후에는 bark 메서드 호출 가능
        }
    }
}
class Shape {
    void draw() {
        System.out.println("Drawing a shape");
    }
}

class Circle extends Shape {
    @Override
    void draw() {
        System.out.println("Drawing a circle");
    }
}

class Square extends Shape {
    @Override
    void draw() {
        System.out.println("Drawing a square");
    }
}

public class UpcastingExample {
    public static void main(String[] args) {
        Shape[] shapes = new Shape[3];
        shapes[0] = new Circle();
        shapes[1] = new Square();
        shapes[2] = new Circle();

        for (Shape shape : shapes) {
            shape.draw();  // 다형성: 배열 내에 각 객체의 실제 타입에 따라 다른 메서드 호출
        }
    }
}

class Calculator {
    int add(int a, int b) {
        return a + b;
    }

    double add(double a, double b) {
        return a + b;
    }

    void displayResult(Shape shape) {
        shape.draw();
    }

    public static void main(String[] args) {
        Calculator calc = new Calculator();
        Circle myCircle = new Circle();
        Square mySquare = new Square();

        calc.displayResult(myCircle);  // 업캐스팅 후 메서드 호출
        calc.displayResult(mySquare);  // 업캐스팅 후 메서드 호출
    }
}
---------------------------------------------------------------------------------------

class Animal {
    void makeSound() {
        System.out.println("Animal makes a sound");
    }
}

class Dog extends Animal {
    @Override
    void makeSound() {
        System.out.println("Dog barks");
    }
}

public class UpcastingOverrideExample {
    public static void main(String[] args) {
        Animal myDog = new Dog();  // 업캐스팅
        myDog.makeSound();         // Dog 클래스에서 오버라이딩한 메서드 호출
    }
}
--------------------------------------------------------------------------------

class Animal {
    void makeSound() {
        System.out.println("Animal makes a sound");
    }
}

class Dog extends Animal {
    @Override
    void makeSound() {
        System.out.println("Dog barks");
    }
}

class SoundMachine {
    Animal createAnimal() {
        return new Dog();  // 업캐스팅하여 반환
    }
}

public class PolymorphicReturnTypeExample {
    public static void main(String[] args) {
        SoundMachine machine = new SoundMachine();
        Animal myAnimal = machine.createAnimal();  // 업캐스팅된 객체 반환
        myAnimal.makeSound();                      // Dog 클래스에서 오버라이딩한 메서드 호출
    }
}




GIT 기본설정
[system, global, local] 
: git config --global core.editor "code --wait"
  git config --global core.autucrlf true
  git config --global core.safecrlf false

  git config --global user.email
  git config --global core.name 
  git config --global init.defalutBranch main
  
git init basic
cd basic
(하부폴더에 .git 확인)
[저장소 안에 들어오면 맨 오른쪽에 브랜치 이름(=main)이 등장]

리눅스 명령어
: pwd 현 폴더 표시
  cd change directory
  mkdir 디렉토리 만들기
  ls-al 파일 리스트 보여줌(-a 숨긴파일 표시, -l 상세정보)
  touch 빈파일 생성
  echo 문자열 터미널에 그대로 출력
  cat fname .txt파일만 가능, 파일 내용 보이기
  mv f1 f2 파일 f1을 f2로 이름수정
  rm 파일 삭제(-f: 강제삭제, -r: 디렉토리 내부의 모든내용 삭제)

작업영역
Working directory --add--> Staging area --commit--> .git

git status [--long|--short|-s] 파일상태 확인해보기


* add가 된 시점부터 파일은 tracked 상태
  commit -am은 첫커밋 이후부터 사용가능
  git status에 나오는 녹색은 스테이징 영역, 붉은색은 작업 디렉토리

  동일한 파일이 3 영역에 모두다 존재할 경우: nothing to commit, working tree clean

  + feat.사설강의
ignore: tracking하지 않은 파일상태로 만들기
echo 파일명 >.gitignore
(ls-al로 확인가능)

<버전관리개요>
: 어느 시점의 파일이나 소스의 내용을 확인해보고 상태로 되돌리기(파일추가 및 수정이력 관리)
:시간 흐름에 따라 파일 집합에 대한 변경사항을 추적및 관리(버전관리시스템)

CLI : 텍스트 입력-텍스트 표시(window의 CMD나 UNIX의 shell이 해당된다)
GUI : 마우스  + 텍스트 입력 - 결과 표시(소스트리가 이에 해당된다)

버전관리 개요 

• 어느 사람이 파일이나 소스나 내용을 확인해 보고 상태로 되돌리기 

파일추가 + 수정이력 관리 

시간 흐름에 따라 파일 집합에 대한 변경 사항을 추적, 관리 

(the version control system tracks changes to a file or set of files over time) 

-버진 저장+백업(변경사항의 자세한 확인) 

- 여러사용자에 대한 버전이력 추적관리 (소스 충돌 등) 

Command Line Interface: 텍스트인력 - 텍스트 표시 ( cmd = 명령어줄 인터페이스 (git bash), CLI
Graphic User Interface :마우스+텍스트 입력- 결과표시 소스트리 그래픽 사용자 인터페이스 (소스트리), GUI 

저장소 

원격저장소 (Remote Repository) (add+ commit 가능)



clone: 원격서장소를 지역저장소에 복사 

Push: 원격저장소에 올리기, full: 지역 저장소로 내리기 (Push: 공개, Pull: 지역저장소로) 

지역저장소 (Local Repository) 

버전시스템 

CVS, SVN, GIT, Mercurial, Bazarr 

깃허브가 깃를 위한 웹저장소 (협의공간)→ 오픈소스 공유플랫폼 

GiT
모든 개발자는 지역 시스템에 코드에 전체 사본을 보유 

기능: 여러 개발자가 함께 작업, 소스변경사항 추적, 분산버전제어 도구 사용: 평행분기를 비선형 개발 지원 

SW 버전 

version: 프로그램을 수정이거나 개선할때 마다 코드를 구분하기 위해 부여된 식별자 

・보통 숫자 사용
·"년', '월'사용
·2자리,3자리사용(깃-sw은 3자리)


major -minor.path 

→Semantic Versioning 
Major(정식버전 1부터 시작)
minor (메이저 번호에서 기능추가 or 변경사항)
패치번호(버그 수정 등 미미한 변화) 

태그 

: 특림 커밋값에 버전번호 or 다른 이름 부여 (보통 v1.4.0) 
① 주석태그: 태그이름+ 정보(작성과 email, 태그시각, 메세지) 포함 

② 일반 태그는 태그이름만


태그 

주석태그(태그이름 중복×)
Git tag -a v1.0.0 -m ' first version' (작성한 사람의 이름, 날짜, 메세지 ) 포함 
git tag -a v1.0.0 (기본 설정된 전기로 메세지 편립) → 기본편립기 설정X VI (어려운 편집기 등장)
git tag v1.0.0(-a, -m 안됨 일반태그)
git tag (가장 예전부터)
-d (옵션, 삭제)
git log(가장 최신부터) 

Branch(커밋시기 이동하는 포인터) 

파일의 집합을 통째도 복사해 독립적으로 다시개발진행 (여러개발과 동시작업 o)하나 프로젝트 여러갈래 
<브랜치병합>: 독립된 브랜치에서 코드 변경 작업후 원래버전과 합칠수 있다.



Branch main →Branch main
          ↓                      ↑merge(병합)
Branch topic → Branch topic



다른 브랜치 영향없이 (버그청, 기능개발, 안전하게!) 

HEAD 브랜치의 최신 커밋을 가르킴(CHECKOUT, SWITCH 사용 HEAD→main) 

git branch 커밋이 발생한 브랜치 목록
git Checkout HEAD~ 마지막 이전
git branch -v 마지막 커밋아이디


git branch -D 강제삭제
                   -d 삭제

it merge branch_name
 branch_name 브랜치의 변경 내용을 현재 브랜치로 병합

--no-ff (Fast Forward 머지 방지, 3-way로):


git merge --no-ff branch_name
--no-ff 옵션을 사용하면 항상 새로운 머지 커밋을 만들어 강제로 fast-forward 머지를 방지

--squash:

git merge --squash branch_name
--squash 옵션은 브랜치의 모든 변경 사항을 하나의 커밋으로 압축해 병합, 하나의 큰 커밋으로 변경 이력을 간소화할 수 있다.

--commit:

git merge --commit -m "커스텀 커밋 메시지" branch_name
--commit 옵션은 병합 시 커밋 메시지를 지정할 수 있게 해줍니다.

--abort:


git merge --abort
병합 중에 문제가 발생하면 --abort 옵션을 사용해 머지를 취소하고 이전 상태로 돌아감

--no-edit (기본 커밋 메시지 사용):

git merge --no-edit branch_name
--no-edit 옵션은 병합 커밋 메시지를 편집하지 않고 기본 메시지를 사용

--edit (커밋 메시지 편집):


git merge --edit branch_name
--edit 옵션은 병합 시 커밋 메시지를 편집할 수 있게 해준다

충돌발생시 (브랜치 명|MERGING)이 등장하는데 이때 현재 브랜치에 있는 파일 혹은 수정내용이 있는 다른 브랜치의 파일의 내용을 선택할건지 고려함


오픈소스소프트웨어: 누구나 제한없이 코드 사용가능한 오픈소스 라이선스를 만족하는 소프트웨어

OSI: 공개소스 정의의 관리 및 촉진을 담당하는 비영리조합(인증마크 발행)

FSW: 리처드 스톨먼, 자유소프트웨어 재단설립(GNU: 자유소프트웨어의 운영체제,소프트웨어/기존걸 보고 더 나은 걸 만들수 있다)
        카피레프트: 저작권 인정 하지만 소프트웨어를 복제해 사용할 수 있는 권리를 주어야한다.
        BSD: 무료 유닉스 운영체제(OS에서 사용)

오픈소스 개발모델(Linux Apache Mys	ql Php(or perl or python), 일명 LAMP)

라이선스: GPL(Strong copy):FSS에서 만든 라이선스, 2차 배포시 명시 및 무조건 GPL로 명시(깃, 리눅스커널, 파이어폭스, 워드프레스)
         AGPL: 네트워크로 상호작용하는 소프트웨어의 소스코드를 공개
         LGPL(weak copyleft): 오픈소스 라이브러리에 대한 소스코드만 공개,몽고DB
         APACHE(none copyleft): 소스코드 수정 후 배포시 무조건 명시 , 안드로이드 하둡
         MIT(none copyleft): 학생을 위한 라이선스, 저작권 명시 의무, 최소한의 제한사항, 파이어폭스 v2.1
         
git stash:

last in frist out형식의 스택구조를 가진다. 파일의 변경사항을 숨기는데 도움을 준다.

--index: 스테이징 영역까지
--keep index, -k: 스테이징 영역제외
--include -untracked,-u: 트래킹되지 않은 파일도 포함
-p,-path: 대화형 프롬포트 저장할 파일 지정



git stash save "message": 스태시를 저장할 때  메시지를 지정

git stash list: 저장된 스태시 목록을 확인(각 스태시는 고유한 식별자와 저장 시간이 표시)

git stash show: 커밋된 자료랑 스태시 항목간 차이 표시(-p 필요)

git stash apply [stash@{n}]: 

가장 최근의 스태시를 적용, 특정 스태시를 적용하려면 [stash@{n}] 부분에 스태시의 인덱스 번호를 지정

git stash pop [stash@{n}]: 

가장 최근의 스태시를 적용하고 해당 스태시를 삭제 특정 스태시를 적용하려면 [stash@{n}] 부분에 스태시의 인덱스 번호를 지정(apply + drop)

git stash drop [stash@{n}]: 

특정 스태시를 삭제, 지정하지 않을 경우 가장 최근의 스태시가 삭제

git stash clear: 모든 스태시 삭제

git rebase:


git rebase 명령어는 브랜치의 기록을 다른 브랜치 위로 옮기기, 머지는 브랜치를 옮기고 rebase는 공통조상의 위치를 옮김

-i 또는 --interactive:

git rebase -i HEAD~3
-i 옵션은 대화형 모드 편집기로각 커밋에 대한 작업을 선택하고 순서를 변경가능
Pick: 그대로
Reword:개별 커밋메세지 작성
Squash: 커밋을 이전커밋에 결합
Drop: 커밋삭제

-m 또는 --merge:

git rebase -m branch_name
병합 커밋 이후의 변경 사항만을 새로운 기준 브랜치에 적용합


-c 또는 --continue:

git rebase -c
-c 옵션은 rebase 중에 일시 중단된 작업을 계속함

--skip:

git rebase --skip
--skip 옵션은 현재 커밋을 건너뛰고 다음 커밋으로 이동

--abort:

git rebase --abort
--abort 옵션은 rebase 작업을 중단하고 원래 브랜치로 돌아가기

--amend 옵션: 커밋이력 수정

git reset과 git revert는 둘 다 Git에서 커밋 히스토리를 수정하는 데 사용되는 명령어입니다만, 각각 다른 방식으로 동작합니다.

1. git reset:
git reset은 특정 커밋 이후의 커밋을 제거하거나 변경하는 데 사용, 로컬 저장소에서의 작업
git reset [옵션] [대상 커밋]
옵션:
--soft: 커밋만 취소하고, 변경 사항은 스테이징 영역에 그대로 
--mixed (기본값): 커밋을 취소하고, 변경 사항을 스테이징 영역에 올리지 않은 상태로 되돌립니다.
--hard: 커밋을 취소하고, 변경 사항을 모두 삭제하여 워킹 디렉토리를 이전 커밋 상태로 되돌립니다.

# 마지막 2개의 커밋을 취소하고 스테이징 영역은 그대로 둠
git reset --soft HEAD~2

# 마지막 커밋을 취소하고 스테이징 영역을 초기화
git reset --mixed HEAD~1

# 마지막 커밋을 완전히 삭제하고 스테이징 영역도 초기화
git reset --hard HEAD~1


2. git revert:
git revert는 특정 커밋을 취소하고, 그 변경 내용을 새로운 커밋으로 만듬, 원격 저장소에 이미 푸시된 커밋을 수정할 때 유용


git revert [대상 커밋]

# 특정 커밋을 취소하고 새로운 커밋으로 만듦
git revert abcdef
git revert는 이전 커밋을 삭제하는 대신, 새로운 커밋을 생성하여 이전 변경 사항을 취소하는 효과를 얻음, 이렇게 하면 커밋 히스토리가 변경되지만, 다른 사람들과의 협업 시에 좋다


git reset 사용 시:

로컬 저장소에서만 사용되며, 이미 푸시한 커밋을 수정할 때 주의필요
커밋 히스토리를 정리하고 싶을 때 사용

git revert 사용 시:

원격 저장소에 푸시된 커밋을 수정할 때 유용
커밋 히스토리를 변경해도 되지만, 이미 협업 중인 다른 개발자들과의 충돌을 방지하고자 할 때 사용
어떤 명령어를 선택할지는 프로젝트의 협업 방식, 히스토리 정책, 그리고 이미 푸시된 커밋의 여부에 따라 다름
